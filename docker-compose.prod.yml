version: "3.9"

services:
  web:
    image: app
    restart: always
    env_file: .env
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${DB_HOST}
      - ALLOWED_DJANGO_HOSTS=${ALLOWED_DJANGO_HOSTS}
    volumes:
      - static_volume:/code/static
    depends_on:
      - db
    networks:
      - nginx_network
      - db_network
    entrypoint: gunicorn --chdir asf_rm --bind :8000 asf_rm.wsgi:application

  migration:
    build: .
    image: app
    # restart: always
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=${DB_HOST}
    depends_on:
      - db
    networks:
      - db_network
    command: bash -c "
             python manage.py makemigrations core general cal &&
             python manage.py migrate"

  nginx:
    image: nginx:1.21
    restart: always
    ports:
      - 8000:80
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/code/static
    depends_on:
      - web
    networks:
      - nginx_network

  db:
    image: postgres:14.1
    restart: always
    volumes:
      - db_volume:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - db_network

networks:
  nginx_network:
    driver: bridge
  db_network:
    driver: bridge

volumes:
  db_volume:
  static_volume:
