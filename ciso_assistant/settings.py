"""
Django settings for ciso_assistant project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/


if "POSTGRES_NAME" environment variable defined, the database engine is posgresql
and the other env variables are POSGRES_USER, POSTGRES_PASSWORD, DB_HOST, DB_PORT
else it is sqlite, and no env variable is required

"""

from pathlib import Path
import os
import json
from urllib.parse import urlparse
from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

print("BASE_DIR:", BASE_DIR)

with open(BASE_DIR / 'ciso_assistant/VERSION') as f:
    VERSION = f.read().strip()
    print(f'CISO Assistant Version: {VERSION}')

try:
    with open(BASE_DIR / 'ciso_assistant/build.json') as f:
        BUILD = json.load(f)['build']
except FileNotFoundError:
    BUILD = 'unset'
    print('CISO Assistant Build: unset. Please refer to the documentation to set it.')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG') == 'True'

CISO_URL = os.environ.get('CISO_URL', 'http://127.0.0.1:8000')
print("coucou", CISO_URL)
ALLOWED_HOSTS = [urlparse(CISO_URL).hostname]
CSRF_TRUSTED_ORIGINS = [CISO_URL]

RECAPTCHA_PUBLIC_KEY = os.environ.get('RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = os.environ.get('RECAPTCHA_PRIVATE_KEY')
SILENCED_SYSTEM_CHECKS = ['captcha.recaptcha_test_key_error'] # see https://developers.google.com/recaptcha/docs/faq

LOCAL_STORAGE_DIRECTORY = os.environ.get('LOCAL_STORAGE_DIRECTORY', BASE_DIR / "db/attachments")
ATTACHMENT_MAX_SIZE_MB = os.environ.get('ATTACHMENT_MAX_SIZE_MB', 10)
MEDIA_ROOT = LOCAL_STORAGE_DIRECTORY

PAGINATE_BY = os.environ.get('PAGINATE_BY', default=500)

SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', default=False) # should be True in https environments
SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', default=False) # should be True in https environments
CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', default=False) # should be True in https environments

# /!\ see https://docs.djangoproject.com/en/4.2/ref/middleware/#http-strict-transport-security
SECURE_HSTS_SECONDS = os.environ.get('SECURE_HSTS_SECONDS', default=0)
SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=False)
SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', default=False)


# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "whitenoise.runserver_nostatic",
    'django.contrib.staticfiles',
    'django.forms',
    'fieldsets_with_inlines',
    'tailwind',
    'theme',
    'iam',
    'core',
    'cal',
    'django_filters',
    'library',
    'serdes',
    'passkeys',
    'django_cleanup.apps.CleanupConfig',
    ]

if RECAPTCHA_PUBLIC_KEY:
    INSTALLED_APPS.append('captcha')
    print("recaptcha enabled")
else:
    print("recaptcha disabled")

X_FRAME_OPTIONS = 'SAMEORIGIN'
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'ciso_assistant.urls'
LOGIN_REDIRECT_URL = 'overview'
LOGOUT_REDIRECT_URL = 'login'

SESSION_COOKIE_AGE = int(os.environ.get('SESSION_COOKIE_AGE', default=60*15))  # defaults to 15 minutes
SESSION_SAVE_EVERY_REQUEST = os.environ.get('SESSION_SAVE_EVERY_REQUEST', default=True) # prevents session from expiring when user is active
SESSION_EXPIRE_AT_BROWSER_CLOSE = os.environ.get('SESSION_EXPIRE_AT_BROWSER_CLOSE', default=True)

CISO_SUPERUSER_EMAIL = os.environ.get('CISO_SUPERUSER_EMAIL')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')

EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS')
# rescue mail
EMAIL_HOST_RESCUE = os.environ.get('EMAIL_HOST_RESCUE')
EMAIL_PORT_RESCUE = os.environ.get('EMAIL_PORT_RESCUE')
EMAIL_HOST_USER_RESCUE = os.environ.get('EMAIL_HOST_USER_RESCUE')
EMAIL_HOST_PASSWORD_RESCUE = os.environ.get('EMAIL_HOST_PASSWORD_RESCUE')
EMAIL_USE_TLS_RESCUE = os.environ.get('EMAIL_USE_TLS_RESCUE')

EMAIL_TIMEOUT = int(os.environ.get('EMAIL_TIMEOUT', default="5")) # seconds

## Licence management
LICENCE_DEPLOYMENT = os.environ.get('LICENCE_DEPLOYMENT', default="On-premises")
LICENCE_TYPE = os.environ.get('LICENCE_TYPE', default="Standard")
LICENCE_SUPPORT = os.environ.get('LICENCE_SUPPORT', default="Standard")
LICENCE_EXPIRATION = os.environ.get('LICENCE_EXPIRATION', default="-")


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "core/templates",
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'

WSGI_APPLICATION = 'ciso_assistant.wsgi.application'

AUTH_USER_MODEL = 'iam.User'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGES = [
    ('en','English'),
    ('fr', 'French'),
]

PROJECT_PATH = os.path.dirname(os.path.abspath(__file__))

LOCALE_PATHS = (
    os.path.join(PROJECT_PATH, '../locale'),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = BASE_DIR / 'staticfiles'   # for collectstatic
STATICFILES_DIRS = [
    BASE_DIR / "static",  # the js files are here
]

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

TAILWIND_APP_NAME = 'theme'
INTERNAL_IPS = [
    "127.0.0.1",
]

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


if 'POSTGRES_NAME' in os.environ:
    print("Postgresql database engine")
    fp = os.environ.get('POSTGRES_PASSWORD_FILE')
    if fp:
        os.environ['POSTGRES_PASSWORD'] = Path(fp).read_text().strip()
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ['POSTGRES_NAME'],
            'USER': os.environ['POSTGRES_USER'],
            'PASSWORD': os.environ['POSTGRES_PASSWORD'],
            'HOST': os.environ['DB_HOST'],
            'PORT': os.environ.get('DB_PORT', '5432'),
        }
    }
else:
    print("sqlite database engine")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / "db/ciso-assistant.sqlite3",
        }
    }

AUTHENTICATION_BACKENDS = ['passkeys.backend.PasskeyModelBackend'] 
FIDO_SERVER_ID=urlparse(CISO_URL).hostname
FIDO_SERVER_NAME="FidoCiso"
# leave KEY_ATTACHMENT undefined to allow both platform and roaming authenticators

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.ScryptPasswordHasher',
]
